/*
 * BilProjekt.c
 *
 * Created: 2023-04-05 14:16:34
 * Author : lucas
 */ 

#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
	DDRB = 0xff;
	sensor_pwm_init();
	adc_init();
	
	
	while (1) {
		
		_delay_ms(500);
		set_pulse_sensor(1250);
		read_sensor();
		_delay_ms(500);
		
		set_pulse_sensor(1100);
		read_sensor();
		_delay_ms(500);
		
		set_pulse_sensor(1000);
		read_sensor();
		_delay_ms(500);
		
		set_pulse_sensor(900);
		read_sensor();
		_delay_ms(500);
		
		set_pulse_sensor(800);
		read_sensor();
		_delay_ms(500);
		
		set_pulse_sensor(900);
		read_sensor();
		_delay_ms(500);
		
		set_pulse_sensor(1000);
		read_sensor();
		_delay_ms(500);
		
		set_pulse_sensor(1100);
		read_sensor();
		
		
	}
}






void drive_forward(int speed){
	
	
	
}

void stop(){
	
	
}

void turn_right(int degrees){
	
	
}

void turn_left(int degrees){
	
	
	
}

void drive_backward(){
	// denna funktion ska anropas ifall ett hinder varit på samma plats för länge. Man kan då anta att bilen råkat köra in i skiten och därmed måste backa
	
}

int servo_control(){
	// dela upp sensorns i 4 sektioner
	//läs sensor i varje kvadrant
	
	//om någonting avläses ska siffran för den sektion skickas till funktionerna H - bryggan; turn_right / turn_left
	
	
	
	//return section;
}

int read_sensor(){
	
	if (adc_read() > 150 && adc_read() < 350){
		PORTB = 0xff;
		return 1;
	} 
	
	PORTB = 0x00;
	
	return 0;
}

void hbrigde_init(){
		
	

}



void sensor_pwm_init(){
	
	TCCR3A = 0b10000010;
	TCCR3B = 0b00011010;
	set_period_sensor(20000);
	set_pulse_sensor(950);
}

void set_pulse_sensor(uint16_t pulse){
	//enligt handledning i labb 2, sätter pulsen genom att sätta output compare register till ett värde
	OCR3A = pulse;
}

void set_period_sensor(uint16_t period){
	// enligt handledning i labb 2, sätter perioden genom att sätta Input compare register till ett värde
	ICR3 = period;
}

void motor_pwm_init(){
	// Set PD5 as an output pin
	DDRD |= (1 << PIND5);

	// Configure Timer 0 for fast PWM on PD5
	TCCR0A |= (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);
	TCCR0B |= (1 << CS01);
	
}

void set_period_motor(int period){
	ICR1 = period;
}

void set_pulse_motor(){
	OCR1A = pulse;
}





void adc_init(){
		DDRA |= 0b00000000; //hela a är inputs
		ADCSRA |= (1 << ADEN);
		ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
		ADMUX |= (1 << REFS0) |(1 << REFS0) ; //referensspänning
}


int adc_read(){
	//här måste vi sätta ett register som input
	//PRR0 = 0b00000000;
	ADCSRA |= (1<<ADSC);
	while(ADCSRA&(1<<ADSC)){} //vänta på adc conversionen
	return ADC;
}

//generera avbrott med lagom intervall, med en typ timer. Då ska vi ändra vinkel och läsa input
